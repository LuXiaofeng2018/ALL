# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_SWWE', [dirname(__file__)])
        except ImportError:
            import _SWWE
            return _SWWE
        if fp is not None:
            try:
                _mod = imp.load_module('_SWWE', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _SWWE = swig_import_helper()
    del swig_import_helper
else:
    import _SWWE
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def mallocPy(n):
    return _SWWE.mallocPy(n)
mallocPy = _SWWE.mallocPy

def conc(a, b, c, n, m, k, d):
    return _SWWE.conc(a, b, c, n, m, k, d)
conc = _SWWE.conc

def writetomem(x, i, f):
    return _SWWE.writetomem(x, i, f)
writetomem = _SWWE.writetomem

def readfrommem(x, i):
    return _SWWE.readfrommem(x, i)
readfrommem = _SWWE.readfrommem

def deallocPy(x):
    return _SWWE.deallocPy(x)
deallocPy = _SWWE.deallocPy

def HankEnergyall(x, h, u, g, n, nBC, dx):
    return _SWWE.HankEnergyall(x, h, u, g, n, nBC, dx)
HankEnergyall = _SWWE.HankEnergyall

def hall(x, h, n, nBC, dx):
    return _SWWE.hall(x, h, n, nBC, dx)
hall = _SWWE.hall

def uhall(x, h, u, n, nBC, dx):
    return _SWWE.uhall(x, h, u, n, nBC, dx)
uhall = _SWWE.uhall

def evolvewrap(u, h, bed, hMbeg, hMend, wMbeg, wMend, uMbeg, uMend, bMbeg, bMend, g, dx, dt, n, nBC, nbc, theta, hhbc, whbc, bhbc, uhbc):
    return _SWWE.evolvewrap(u, h, bed, hMbeg, hMend, wMbeg, wMend, uMbeg, uMend, bMbeg, bMend, g, dx, dt, n, nBC, nbc, theta, hhbc, whbc, bhbc, uhbc)
evolvewrap = _SWWE.evolvewrap

def evolvewrapChangeBC(u, h, bed, hMbeg, hMend, wMbeg, wMend, uMbeg, uMend, bMbeg, bMend, hMbeg1, hMend1, wMbeg1, wMend1, uMbeg1, uMend1, bMbeg1, bMend1, g, dx, dt, n, nBC, nbc, theta, hhbc, whbc, bhbc, uhbc):
    return _SWWE.evolvewrapChangeBC(u, h, bed, hMbeg, hMend, wMbeg, wMend, uMbeg, uMend, bMbeg, bMend, hMbeg1, hMend1, wMbeg1, wMend1, uMbeg1, uMend1, bMbeg1, bMend1, g, dx, dt, n, nBC, nbc, theta, hhbc, whbc, bhbc, uhbc)
evolvewrapChangeBC = _SWWE.evolvewrapChangeBC

def evolvewrapIncomwavetoDir(u, h, bed, WG1ht, WG1ht1, hMend, wMend, uMend, bMend, g, dx, dt, n, nBC, nbc, theta, hhbc, whbc, bhbc, uhbc):
    return _SWWE.evolvewrapIncomwavetoDir(u, h, bed, WG1ht, WG1ht1, hMend, wMend, uMend, bMend, g, dx, dt, n, nBC, nbc, theta, hhbc, whbc, bhbc, uhbc)
evolvewrapIncomwavetoDir = _SWWE.evolvewrapIncomwavetoDir
# This file is compatible with both classic and new-style classes.


