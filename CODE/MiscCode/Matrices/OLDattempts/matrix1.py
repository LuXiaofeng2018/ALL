# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_matrix1', [dirname(__file__)])
        except ImportError:
            import _matrix1
            return _matrix1
        if fp is not None:
            try:
                _mod = imp.load_module('_matrix1', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _matrix1 = swig_import_helper()
    del swig_import_helper
else:
    import _matrix1
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def mallocPy(n):
    return _matrix1.mallocPy(n)
mallocPy = _matrix1.mallocPy

def malloc2Py(n, m):
    return _matrix1.malloc2Py(n, m)
malloc2Py = _matrix1.malloc2Py

def conc(a, b, c, n, m, k, d):
    return _matrix1.conc(a, b, c, n, m, k, d)
conc = _matrix1.conc

def writetomem(x, i, f):
    return _matrix1.writetomem(x, i, f)
writetomem = _matrix1.writetomem

def readfrommem(x, i):
    return _matrix1.readfrommem(x, i)
readfrommem = _matrix1.readfrommem

def deallocPy(x):
    return _matrix1.deallocPy(x)
deallocPy = _matrix1.deallocPy

def banmul(a, n, m1, m2, x, b):
    return _matrix1.banmul(a, n, m1, m2, x, b)
banmul = _matrix1.banmul

def malloc22Py(r, c):
    return _matrix1.malloc22Py(r, c)
malloc22Py = _matrix1.malloc22Py

def writeto2mem(x, i, j, f):
    return _matrix1.writeto2mem(x, i, j, f)
writeto2mem = _matrix1.writeto2mem

def readfrom2Dmem(x, i, j):
    return _matrix1.readfrom2Dmem(x, i, j)
readfrom2Dmem = _matrix1.readfrom2Dmem

def banmul2D(a, n, m1, m2, x, b):
    return _matrix1.banmul2D(a, n, m1, m2, x, b)
banmul2D = _matrix1.banmul2D

def bandec(a, n, m1, m2, al, indx, d):
    return _matrix1.bandec(a, n, m1, m2, al, indx, d)
bandec = _matrix1.bandec

def mallocLongPy(n):
    return _matrix1.mallocLongPy(n)
mallocLongPy = _matrix1.mallocLongPy
# This file is compatible with both classic and new-style classes.


